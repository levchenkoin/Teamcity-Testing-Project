package com.example.teamcity.ai;

import okhttp3.*;
import org.json.JSONObject;

import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.*;
import java.util.Properties;
import java.util.stream.Stream;

public class SurefireLogAnalyzer {

    private static final String API_URL = "https://api.openai.com/v1/chat/completions";
    private static final String CONFIG_PATH = "src/main/resources/config.properties";

    public static void main(String[] args) {
        try {
            String logs = collectLogData("target/surefire-reports");
            String apiKey = resolveApiKey();
            String aiAnalysis = sendToOpenAI(apiKey, logs);

            System.out.println("üîç AI-–∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤:\n" + aiAnalysis);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
            Files.write(Paths.get("ai-analysis.txt"), aiAnalysis.getBytes());

        } catch (IOException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private static String collectLogData(String folderPath) throws IOException {
        StringBuilder content = new StringBuilder();

        try (Stream<Path> paths = Files.walk(Paths.get(folderPath))) {
            paths.filter(Files::isRegularFile)
                .filter(p -> p.toString().endsWith(".txt") || p.toString().endsWith(".xml"))
                .forEach(p -> {
                    try {
                        content.append("\n=== ").append(p.getFileName()).append(" ===\n");
                        content.append(Files.readString(p));
                    } catch (IOException e) {
                        System.err.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + p.getFileName());
                    }
                });
        }

        String result = content.toString();
        return result.length() > 12000 ? result.substring(result.length() - 12000) : result; // –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    }

    private static String resolveApiKey() throws IOException {
        String key = System.getenv("OPENAI_API_KEY");

        if (key == null || key.isEmpty()) {
            Properties props = new Properties();
            try (FileInputStream fis = new FileInputStream(CONFIG_PATH)) {
                props.load(fis);
                key = props.getProperty("openaiApiKey");
            }
        }

        if (key == null || key.isEmpty()) {
            throw new IllegalStateException("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã, –Ω–∏ –≤ config.properties");
        }

        return key;
    }

    private static String sendToOpenAI(String apiKey, String logs) throws IOException {
        JSONObject json = new JSONObject();
        json.put("model", "gpt-4");
        json.put("messages", new org.json.JSONArray()
            .put(new JSONObject().put("role", "system").put("content",
                "–¢—ã ‚Äî AI-—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏ (Surefire Reports) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è –∏–ª–∏ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤."))
            .put(new JSONObject().put("role", "user").put("content", logs))
        );

        OkHttpClient client = new OkHttpClient();
        RequestBody body = RequestBody.create(json.toString(), MediaType.get("application/json; charset=utf-8"));
        Request request = new Request.Builder()
            .url(API_URL)
            .header("Authorization", "Bearer " + apiKey)
            .header("Content-Type", "application/json")
            .post(body)
            .build();

        try (Response response = client.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                throw new IOException("OpenAI API error: " + response);
            }
            return response.body().string();
        }
    }
}

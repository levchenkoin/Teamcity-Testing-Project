package com.example.teamcity.ai;

import okhttp3.*;
import org.json.JSONObject;

import java.io.IOException;
import java.nio.file.*;
import java.util.stream.Stream;

public class SurefireLogAnalyzer {

    private static final String API_URL = "https://api.openai.com/v1/chat/completions";

    public static void main(String[] args) {
        try {
            String logs = collectLogData("target/surefire-reports");

            String apiKey = System.getenv("OPENAI_API_KEY");
            String slackWebhook = System.getenv("SLACK_WEBHOOK_URL");
            String runUrl = System.getenv("GITHUB_RUN_URL");

            if (apiKey == null || apiKey.isEmpty()) {
                throw new IllegalStateException("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã (OPENAI_API_KEY)");
            }

            String aiAnalysis = sendToOpenAI(apiKey, logs);

            // Slack-friendly —Ñ–æ—Ä–º–∞—Ç
            String slackFormatted = formatForSlack(aiAnalysis);
            if (runUrl != null && !runUrl.isEmpty()) {
                slackFormatted += "\nüëâ <" + runUrl + "|View this run on GitHub>";
            }

            // –û—á–∏—â–µ–Ω–Ω—ã–π plain text –¥–ª—è —Ñ–∞–π–ª–∞
            String plainText = aiAnalysis
                .replaceAll("\\*\\*(.*?)\\*\\*", "$1")        // —É–±–∏—Ä–∞–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
                .replaceAll("(?m)^#{1,6}\\s*", "")            // —É–±–∏—Ä–∞–µ–º –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                .replaceAll("(?m)^- ", "- ")                  // —Å–ø–∏—Å–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                .replaceAll("(?m)^>\\s*", "")                 // —É–±–∏—Ä–∞–µ–º —Ü–∏—Ç–∞—Ç—ã
                .replaceAll("```", "");                       // —É–±–∏—Ä–∞–µ–º –∫–æ–¥-–±–ª–æ–∫–∏

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            Files.write(Paths.get("ai-analysis.txt"), plainText.getBytes());

            // Slack –æ—Ç–ø—Ä–∞–≤–∫–∞
            if (slackWebhook != null && !slackWebhook.isEmpty()) {
                sendToSlack(slackFormatted, slackWebhook);
            } else {
                System.out.println("‚ö†Ô∏è Slack webhook –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π SLACK_WEBHOOK_URL");
            }

        } catch (IOException e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private static String collectLogData(String folderPath) throws IOException {
        StringBuilder content = new StringBuilder();

        try (Stream<Path> paths = Files.walk(Paths.get(folderPath))) {
            paths.filter(Files::isRegularFile)
                .filter(p -> p.toString().endsWith(".txt") || p.toString().endsWith(".xml"))
                .forEach(p -> {
                    try {
                        content.append("\n=== ").append(p.getFileName()).append(" ===\n");
                        content.append(Files.readString(p));
                    } catch (IOException e) {
                        System.err.println("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + p.getFileName());
                    }
                });
        }

        String result = content.toString();
        return result.length() > 12000 ? result.substring(result.length() - 12000) : result;
    }

    private static String sendToOpenAI(String apiKey, String logs) throws IOException {
        JSONObject json = new JSONObject();
        json.put("model", "gpt-4o");
        json.put("messages", new org.json.JSONArray()
            .put(new JSONObject()
                .put("role", "system")
                .put("content",
                    "–¢—ã ‚Äî AI-—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ (Surefire Reports) –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –ø–æ —Å—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:\n\n" +
                    "1. **Overview** ‚Äì –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤, –∫–∞–∫–∏–µ –∫–ª–∞—Å—Å—ã, –æ–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞.\n" +
                    "2. **Identified Issues** ‚Äì —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º, –≤ –∫–∞–∫–∏—Ö —Ç–µ—Å—Ç–∞—Ö –∏ –ø–æ—á–µ–º—É –æ–Ω–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏.\n" +
                    "3. **Flaky Tests** ‚Äì –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, NoSuchElementException), –ø–µ—Ä–µ—á–∏—Å–ª–∏ —Ç–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∏ –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏.\n" +
                    "5. **Execution Time Analysis** ‚Äì —É–∫–∞–∂–∏ —Ç–µ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å –æ—Å–æ–±–µ–Ω–Ω–æ –¥–æ–ª–≥–æ, –∏ –≤—ã–¥–≤–∏–Ω–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã. –°—Ä–∞–≤–Ω–∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.\n\n" +
                    "4. **Recommendations** ‚Äì –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏, —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤ –∏–ª–∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã.\n\n" +
                    "–ù–µ –∏–∑–º–µ–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç—á—ë—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª —É–¥–æ–±–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è.")
            )
            .put(new JSONObject()
                .put("role", "user")
                .put("content", logs)
            )
        );
    
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        OkHttpClient client = new OkHttpClient.Builder()
            .callTimeout(java.time.Duration.ofSeconds(120))
            .readTimeout(java.time.Duration.ofSeconds(120))
            .build();
    
        RequestBody body = RequestBody.create(json.toString(), MediaType.get("application/json; charset=utf-8"));
        Request request = new Request.Builder()
            .url(API_URL)
            .header("Authorization", "Bearer " + apiKey)
            .header("Content-Type", "application/json")
            .post(body)
            .build();
    
        int attempts = 0;
        int maxAttempts = 2;
    
        while (attempts < maxAttempts) {
            try (Response response = client.newCall(request).execute()) {
                if (!response.isSuccessful()) {
                    throw new IOException("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " + response);
                }
    
                String responseBody = response.body().string();
                JSONObject result = new JSONObject(responseBody);
                return result
                    .getJSONArray("choices")
                    .getJSONObject(0)
                    .getJSONObject("message")
                    .getString("content");
    
            } catch (java.net.SocketTimeoutException timeoutEx) {
                attempts++;
                if (attempts >= maxAttempts) {
                    throw new IOException("–ó–∞–ø—Ä–æ—Å –∫ OpenAI –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É –ø–æ—Å–ª–µ " + attempts + " –ø–æ–ø—ã—Ç–æ–∫.", timeoutEx);
                } else {
                    System.out.println("‚ö†Ô∏è Timeout, –ø–æ–≤—Ç–æ—Ä –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI... (" + attempts + ")");
                }
            }
        }
    
        throw new IOException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.");
    }

    public static void sendToSlack(String message, String webhookUrl) throws IOException {
        OkHttpClient client = new OkHttpClient();

        JSONObject json = new JSONObject();
        json.put("text", message);

        RequestBody body = RequestBody.create(json.toString(), MediaType.get("application/json; charset=utf-8"));
        Request request = new Request.Builder()
            .url(webhookUrl)
            .post(body)
            .build();

        try (Response response = client.newCall(request).execute()) {
            if (!response.isSuccessful()) {
                throw new IOException("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Slack: " + response);
            }
        }
    }

    private static String formatForSlack(String text) {
        String result = text;

        // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç: **text** ‚Üí *text*
        result = result.replaceAll("\\*\\*(.*?)\\*\\*", "*$1*");

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏: ### Title ‚Üí *Title*
        result = result.replaceAll("###\\s*(.*?)\\n", "*$1*\n");

        // –°–ø–∏—Å–∫–∏: - item ‚Üí ‚Ä¢ item
        result = result.replaceAll("(?m)^- ", "‚Ä¢ ");

        // –¶–∏—Ç–∞—Ç—ã: > text ‚Üí > text
        result = result.replaceAll("(?m)^>\\s*", "> ");

        // –ö–æ–¥-–±–ª–æ–∫–∏ ``` ‚Üí –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å, Slack –ø–æ–Ω–∏–º–∞–µ—Ç –∏—Ö
        return result;
    }
}